"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[930],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=l(n),h=i,g=d["".concat(s,".").concat(h)]||d[h]||u[h]||a;return n?r.createElement(g,o(o({ref:t},p),{},{components:n})):r.createElement(g,o({ref:t},p))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:i,o[1]=c;for(var l=2;l<a;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5600:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return p},default:function(){return d}});var r=n(7462),i=n(3366),a=(n(7294),n(3905)),o=["components"],c={sidebar_position:3},s="Architecture",l={unversionedId:"contributing/architecture",id:"contributing/architecture",isDocsHomePage:!1,title:"Architecture",description:"This Operator is written in Go with help of the Operator-SDK.",source:"@site/docs/contributing/architecture.md",sourceDirName:"contributing",slug:"/contributing/architecture",permalink:"/kubernetes-dbaas/docs/contributing/architecture",editUrl:"https://github.com/bedag/kubernetes-dbaas/edit/main/website/docs/contributing/architecture.md",version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Branching standard",permalink:"/kubernetes-dbaas/docs/contributing/branching-standard"},next:{title:"Testing",permalink:"/kubernetes-dbaas/docs/contributing/testing"}},p=[{value:"Package organization",id:"package-organization",children:[{value:"Controller",id:"controller",children:[]},{value:"Kubernetes API extensions",id:"kubernetes-api-extensions",children:[]},{value:"Core packages",id:"core-packages",children:[]},{value:"Command line interface",id:"command-line-interface",children:[]},{value:"Internal",id:"internal",children:[]}]}],u={toc:p};function d(e){var t=e.components,c=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},u,c,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"architecture"},"Architecture"),(0,a.kt)("p",null,"This Operator is written in Go with help of the ",(0,a.kt)("a",{parentName:"p",href:"https://sdk.operatorframework.io/"},"Operator-SDK"),"."),(0,a.kt)("h2",{id:"package-organization"},"Package organization"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"System architecture organization in packages",src:n(3437).Z})),(0,a.kt)("h3",{id:"controller"},"Controller"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"controllers")," package is responsible for binding the business rules of the Operator with the\nbusiness rules dictated by the stored procedures and for communicating with the Kubernetes API by\nreconciling inbound requests triggered by events. This is where the main logic lives."),(0,a.kt)("h3",{id:"kubernetes-api-extensions"},"Kubernetes API extensions"),(0,a.kt)("p",null,"Folder ",(0,a.kt)("inlineCode",{parentName:"p"},"apis")," contains 3 distinct packages, ",(0,a.kt)("inlineCode",{parentName:"p"},"config/v1"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"database/v1")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"databaseclass/v1"),". They contain\nthe types related to the extension applied to the Kubernetes API, i.e. they contain the types of the new\nAPI objects. They are the entities and contain no business logic. They can be reused freely throughout\nthe application. Each of these 3 packages contain two other files as well: groupversion_info.go\ncontains information relative to the versioning of the resources and is used by the Kubernetes API,\nwhile zz_generated.deepcopy.go contains autogenerated code by the Operator SDK used to allow\nserialization from and to the Kubernetes API and the Operator. These two files can be found in the\nother 2 subpackages as well. Each of the aforementioned packages have their relative Custom Resource\nDefinition (CRD) configuration file."),(0,a.kt)("h3",{id:"core-packages"},"Core packages"),(0,a.kt)("p",null,"Folder ",(0,a.kt)("inlineCode",{parentName:"p"},"pkg")," is, by Go convention, a folder which is supposed to contain packages that can be imported freely,\ni.e. it should not contain any global variables, and it is not tightly coupled with a\nsingle implementation. It contains 4 packages:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Package ",(0,a.kt)("inlineCode",{parentName:"li"},"database")," contains all the code relative to the database. It contains the DBMS drivers used\nto communicate with the DBMS solutions, as well as the types abstracting the various operations,\ninput/output rendering and so on.")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Database driver organizations",src:n(5727).Z})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Package ",(0,a.kt)("inlineCode",{parentName:"li"},"pool")," contains the code relative to the DBMS connection pool. It only holds the DBMS drivers\nstructs responsible for communicating with the DBMS endpoints."),(0,a.kt)("li",{parentName:"ul"},"Package ",(0,a.kt)("inlineCode",{parentName:"li"},"test")," contains some utility code useful for testing."),(0,a.kt)("li",{parentName:"ul"},"Package ",(0,a.kt)("inlineCode",{parentName:"li"},"typeutil")," contains constants and very generic utility functions (boilerplate). Constants are\nmainly useful for avoiding hard-coding error messages etc.")),(0,a.kt)("p",null,"During the course of the project, it was attempted to build a robust system architecture by following\nsoftware engineering principles, especially the SOLID principles."),(0,a.kt)("h3",{id:"command-line-interface"},"Command line interface"),(0,a.kt)("p",null,"Package ",(0,a.kt)("inlineCode",{parentName:"p"},"cmd")," contains the code relative to the command line interface of the Operator such as reading\ncommand line flags, activating/deactivating functionalities, starting the controller and the webhooks,\ninitializing the logger, creating the pool of DBMS connection and so forth. We make use of the excellent\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/spf13/viper"},"Viper")," library to load flags and configuration files and\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/spf13/cobra"},"Cobra")," for the actual CLI implementation."),(0,a.kt)("h3",{id:"internal"},"Internal"),(0,a.kt)("p",null,"Folder ",(0,a.kt)("inlineCode",{parentName:"p"},"internal")," is, by Go convention, a package which cannot be imported from outside this project.\nIt contains the package ",(0,a.kt)("inlineCode",{parentName:"p"},"logging")," which contains customized logger implementations for the Operator.\nWe use ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/uber-go/zap"},"zap")," for the logging back-end and ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/go-logr/logr"},"logr")," as a\nfront-end (fa\xe7ade)."))}d.isMDXComponent=!0},3437:function(e,t,n){t.Z=n.p+"assets/images/03_system_diagram-96476803e38117420b6c4e8bbd76f09a.png"},5727:function(e,t,n){t.Z=n.p+"assets/images/04_system_diagram-bae8410f2e475dcdd0543aedf55091a1.png"}}]);