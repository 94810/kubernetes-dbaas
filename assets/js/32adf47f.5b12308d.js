"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[601],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return u}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),p=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),u=r,b=m["".concat(i,".").concat(u)]||m[u]||d[u]||s;return n?a.createElement(b,o(o({ref:t},c),{},{components:n})):a.createElement(b,o({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<s;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4470:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return i},metadata:function(){return p},toc:function(){return c},default:function(){return m}});var a=n(7462),r=n(3366),s=(n(7294),n(3905)),o=["components"],l={sidebar_position:1},i="Helm",p={unversionedId:"operator-deployment/helm",id:"operator-deployment/helm",isDocsHomePage:!1,title:"Helm",description:"The Operator provides an official Helm chart.",source:"@site/docs/operator-deployment/helm.md",sourceDirName:"operator-deployment",slug:"/operator-deployment/helm",permalink:"/kubernetes-dbaas/docs/operator-deployment/helm",editUrl:"https://github.com/bedag/kubernetes-dbaas/edit/main/website/docs/operator-deployment/helm.md",version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Tips & tricks",permalink:"/kubernetes-dbaas/docs/operator-configuration/tips-and-tricks"},next:{title:"Vanilla",permalink:"/kubernetes-dbaas/docs/operator-deployment/vanilla-deployment"}},c=[{value:"Requirements",id:"requirements",children:[]},{value:"Installation",id:"installation",children:[]},{value:"Helper templates",id:"helper-templates",children:[{value:"DatabaseClasses generator",id:"databaseclasses-generator",children:[]},{value:"DBMS Secrets generator",id:"dbms-secrets-generator",children:[]}]},{value:"Additional information",id:"additional-information",children:[]}],d={toc:c};function m(e){var t=e.components,n=(0,r.Z)(e,o);return(0,s.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"helm"},"Helm"),(0,s.kt)("p",null,"The Operator provides an official Helm chart."),(0,s.kt)("h2",{id:"requirements"},"Requirements"),(0,s.kt)("p",null,"Install ",(0,s.kt)("a",{parentName:"p",href:"https://artifacthub.io/packages/helm/prometheus-community/kube-prometheus-stack"},"kube-prometheus-stack")," v17.1.3\nused for scraping logs and metrics:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"helm install prometheus-operator prometheus-community/kube-prometheus-stack --create-namespace --namespace=prometheus\n")),(0,s.kt)("p",null,"Install ",(0,s.kt)("a",{parentName:"p",href:"https://artifacthub.io/packages/helm/cert-manager/cert-manager"},"cert-manager")," v1.4.0\nused for handling TLS certificates for the webhooks:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"helm install \\                                                                                                                \n  cert-manager jetstack/cert-manager \\\n  --namespace cert-manager \\\n  --create-namespace \\\n  --version v1.4.0 \\\n  --set installCRDs=true\n")),(0,s.kt)("h2",{id:"installation"},"Installation"),(0,s.kt)("p",null,"Finally, install the Operator's Helm Chart:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"helm install kubernetes-dbaas charts/kubernetes-dbaas --create-namespace --namespace=kubernetes-dbaas-system\n")),(0,s.kt)("h2",{id:"helper-templates"},"Helper templates"),(0,s.kt)("p",null,"This Helm Chart contains useful helper templates to facilitate the deployment of the Operator."),(0,s.kt)("h3",{id:"databaseclasses-generator"},"DatabaseClasses generator"),(0,s.kt)("p",null,"The top-level key ",(0,s.kt)("inlineCode",{parentName:"p"},"dbc")," contains an array of entries describing DatabaseClass resources. Each array entry generate one DatabaseClass resource."),(0,s.kt)("p",null,"Example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'dbc:\n  - name: "databaseclass-sample-postgres"\n    driver: "postgres"\n    operations:\n      create:\n        name: "sp_create_db_rowset_eav"\n        inputs:\n          k8sName: "{{ .Metadata.name }}"\n      delete:\n        name: "sp_delete"\n        inputs:\n          k8sName: "{{ .Metadata.name }}"\n      rotate:\n        name: "sp_rotate"\n        inputs:\n          k8sName: "{{ .Metadata.name }}"\n    secretFormat:\n      username: "{{ .Result.username }}"\n      password: "{{ .Result.password }}"\n      port: "{{ .Result.port }}"\n      dbName: "{{ .Result.dbName }}"\n      server: "{{ .Result.fqdn }}"\n      lastRotation: "{{ .Result.lastRotation }}"\n      dsn: "sqlserver://{{ .Result.username }}:{{ .Result.password }}@{{ .Result.fqdn }}:{{ .Result.port }}/{{ .Result.dbName }}"\n')),(0,s.kt)("p",null,"This entry will be translate into a DatabaseClass and deployed. Its structure is analogous to a standard DatabaseClass spec, only it does not contain Kubernetes-specific fields, such as ",(0,s.kt)("inlineCode",{parentName:"p"},"spec")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"metadata"),". Moreover, it contains an additional key ",(0,s.kt)("inlineCode",{parentName:"p"},"dbc[*].name")," which is rendered as the ",(0,s.kt)("inlineCode",{parentName:"p"},"metadata.name")," of the resource."),(0,s.kt)("h3",{id:"dbms-secrets-generator"},"DBMS Secrets generator"),(0,s.kt)("p",null,"The top-level key ",(0,s.kt)("inlineCode",{parentName:"p"},"dbmsSecrets")," contains an array of entries describing Secrets resources which can be referenced in endpoint configurations inside of the ",(0,s.kt)("inlineCode",{parentName:"p"},"dbms[*].endpoints.secretKeyRef")," keys. Each array entry generates one Secret resource."),(0,s.kt)("p",null,"Example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'dbmsSecrets:\n  - name: "us-sqlserver-test-credentials"\n    stringData:\n      dsn: "sqlserver://sa:Password&1@192.168.49.1:1433/master"\n  - name: "us-postgres-test-credentials"\n    stringData:\n      dsn: "postgres://postgres:Password&1@192.168.49.1:5432/postgres"\n  - name: "us-mariadb-test-credentials"\n    stringData:\n      dsn: "mariadb://root:Password&1@192.168.49.1:3306/mysql"\n')),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"name")," is mapped to ",(0,s.kt)("inlineCode",{parentName:"p"},"metadata.name")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"stringData")," is rendered as YAML into ",(0,s.kt)("inlineCode",{parentName:"p"},"spec.stringData")," of the generated Secret."),(0,s.kt)("h2",{id:"additional-information"},"Additional information"),(0,s.kt)("p",null,"Additional documentation can be found directly in the Chart's ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/bedag/kubernetes-dbaas/blob/main/charts/kubernetes-dbaas/README.md"},"README"),"."))}m.isMDXComponent=!0}}]);