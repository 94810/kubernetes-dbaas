"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[304],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return m}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(t),m=r,f=u["".concat(l,".").concat(m)]||u[m]||c[m]||o;return t?a.createElement(f,i(i({ref:n},d),{},{components:t})):a.createElement(f,i({ref:n},d))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9353:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return d},default:function(){return u}});var a=t(7462),r=t(3366),o=(t(7294),t(3905)),i=["components"],s={sidebar_position:2},l="Main configuration",p={unversionedId:"operator-configuration/main-configuration",id:"operator-configuration/main-configuration",isDocsHomePage:!1,title:"Main configuration",description:"Operator configuration",source:"@site/docs/operator-configuration/main-configuration.md",sourceDirName:"operator-configuration",slug:"/operator-configuration/main-configuration",permalink:"/kubernetes-dbaas/docs/operator-configuration/main-configuration",editUrl:"https://github.com/bedag/kubernetes-dbaas/edit/main/website/docs/operator-configuration/main-configuration.md",version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Prerequisites",permalink:"/kubernetes-dbaas/docs/operator-configuration/prerequisites"},next:{title:"DatabaseClass",permalink:"/kubernetes-dbaas/docs/operator-configuration/databaseclasses"}},d=[{value:"Operator configuration",id:"operator-configuration",children:[{value:"ComponentConfig",id:"componentconfig",children:[]},{value:"Rate-limiting",id:"rate-limiting",children:[]},{value:"Keepalive",id:"keepalive",children:[]},{value:"DBMS configuration",id:"dbms-configuration",children:[]},{value:"Full example",id:"full-example",children:[]}]}],c={toc:d};function u(e){var n=e.components,t=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"main-configuration"},"Main configuration"),(0,o.kt)("h2",{id:"operator-configuration"},"Operator configuration"),(0,o.kt)("p",null,"The Operator is configured by 2 pieces of configuration, an ",(0,o.kt)("inlineCode",{parentName:"p"},"OperatorConfig")," resource and ",(0,o.kt)("inlineCode",{parentName:"p"},"DatabaseClass")," resources.\nThe order of precedence is the following:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"It uses the configuration file specified through the ",(0,o.kt)("inlineCode",{parentName:"li"},"--load-config")," CLI flag"),(0,o.kt)("li",{parentName:"ol"},"It looks for a file named ",(0,o.kt)("inlineCode",{parentName:"li"},"config.yaml")," in the same path as Operator binary"),(0,o.kt)("li",{parentName:"ol"},"It looks for a file named ",(0,o.kt)("inlineCode",{parentName:"li"},"config.yaml")," in ",(0,o.kt)("inlineCode",{parentName:"li"},"/etc/kubernetes-dbaas"))),(0,o.kt)("p",null,"If you are using the ",(0,o.kt)("a",{parentName:"p",href:"/docs/operator-deployment/helm"},"Helm deployment")," option, you will specify this configuration in ",(0,o.kt)("inlineCode",{parentName:"p"},".Values.operatorConfig"),"\n(example present in the chart), and it will automatically be referenced in the Operator's Pod through a ConfigMap."),(0,o.kt)("p",null,"If you are not using the Helm deployment option, it is sufficient to supply the plain configuration using one of the 3\npossibilities highlighted before.\nSee ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/bedag/kubernetes-dbaas/blob/main/config.yaml.example"},"config.example.yaml")," for an example."),(0,o.kt)("h3",{id:"componentconfig"},"ComponentConfig"),(0,o.kt)("p",null,"The first part contains configuration intended for the ",(0,o.kt)("inlineCode",{parentName:"p"},"kube-controller-manager")," component.\nYou can find out more in its ",(0,o.kt)("a",{parentName:"p",href:"https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.8.3/pkg/config/v1alpha1#ControllerManagerConfigurationSpec"},"godocs"),"\nand ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/kubernetes-sigs/controller-runtime/blob/master/designs/component-config.md"},"design proposal"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"health:\n  healthProbeBindAddress: :8081\nmetrics:\n  bindAddress: 127.0.0.1:8080\nwebhook:\n  port: 9443\nleaderElection:\n  leaderElect: true\n  resourceName: bfa62c96.dbaas.bedag.ch\n  resourceNamespace: default\n")),(0,o.kt)("h3",{id:"rate-limiting"},"Rate-limiting"),(0,o.kt)("p",null,"As a protection against rogue users or as a limitation to batch operations, the Operator embeds a rate-limiter for its\nDB drivers. You can specify how many requests per second are allowed at maximum for an endpoint by setting ",(0,o.kt)("inlineCode",{parentName:"p"},"rps")," to your\ndesired number. If set to 0, the rate-limiter is disabled."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"rps: 1\n")),(0,o.kt)("h3",{id:"keepalive"},"Keepalive"),(0,o.kt)("p",null,"It is possible to enable a keepalive mechanism that checks every ",(0,o.kt)("em",{parentName:"p"},"X")," seconds whether there is a connection issue between\nthe Operator and the DBMS endpoints. The following configuration option lets users specify the interval in seconds\nbetween each retry. If a connection is found to be down, the error is logged using the standard logger, and a connection\nretry is performed. If the option is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"0"),", the keepalive is disabled."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"keepalive: 30\n")),(0,o.kt)("h3",{id:"dbms-configuration"},"DBMS configuration"),(0,o.kt)("p",null,"Endpoints should be configured thought the ",(0,o.kt)("inlineCode",{parentName:"p"},"dbms")," key. As you can see, the Operator accepts an array formed by two\nkeys, ",(0,o.kt)("inlineCode",{parentName:"p"},"databaseClassName")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"endpoints"),"."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"databaseClassName")," is a string specifying the name of the DatabaseClass resource associated with the accompanying\n",(0,o.kt)("inlineCode",{parentName:"li"},"endpoints")," attribute."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"endpoints")," is an array containing the list of DBMS endpoints. It accepts two keys: ",(0,o.kt)("inlineCode",{parentName:"li"},"name")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"dsn"),".",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"name")," is a convenient human-readable name associated with the endpoint. It must be unique in the overall list of endpoints and identifiable by end-users, so\nthat they can refer to it when they want to create a new Database instance. Endpoint names must be properly documented inside your organization."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"dsn")," is the ",(0,o.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Data_source_name"},"data source name")," used to connect to the DBMS endpoint.\nThis project uses the ",(0,o.kt)("inlineCode",{parentName:"li"},"xo/dburl")," package to parse DSN of different database drivers, you can find out more in ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/xo/dburl"},"its documentation"),".")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'dbms:\n  - databaseClassName: "databaseclass-sample-sqlserver"\n    endpoints:\n      - name: "us-sqlserver-test"\n        dsn: "sqlserver://sa:Password&1@localhost:1433/master"\n  - databaseClassName: "databaseclass-sample-psql"\n    endpoints:\n      - name: "us-postgres-test"\n        dsn: "postgres://postgres:Password&1@localhost:5432/postgres"\n  - databaseClassName: "databaseclass-sample-mariadb"\n    endpoints:\n      - name: "us-mariadb-test"\n        dsn: "mariadb://root:Password&1@localhost:3306/mysql"\n')),(0,o.kt)("h4",{id:"dsn-in-secrets"},"DSN in Secrets"),(0,o.kt)("p",null,"It is recommended to have the DSN of DBMS in their own Secret when deploying the Operator in production.\nSecrets can be referenced using the key ",(0,o.kt)("inlineCode",{parentName:"p"},"secretKeyRef")," for each endpoint. ",(0,o.kt)("inlineCode",{parentName:"p"},"secretKeyRef.name")," references the name of the\nSecret and ",(0,o.kt)("inlineCode",{parentName:"p"},"secretKeyRef.key")," references the key containing the DSN respectively."),(0,o.kt)("p",null,"Secrets must be placed in the same\nnamespace of the Operator Pod and must be present before booting the Operator. Updates to those Secrets do not trigger\nany automatic update to the Operator configuration; if a Secret is updated while the Operator is running, the updated\nconfiguration will be loaded during the next Operator boot."),(0,o.kt)("p",null,"Example for ",(0,o.kt)("inlineCode",{parentName:"p"},"secretKeyRef"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: Secret\nmetadata:\n  name: "us-sqlserver-test-secret"\ntype: Opaque\nstringData:\n  dsn: "sqlserver://sa:Password&1@localhost:1433/master"\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'dbms:\n  - databaseClassName: "databaseclass-sample-sqlserver"\n    endpoints:\n      - name: "us-sqlserver-test"\n        secretKeyRef:\n          name: "us-sqlserver-test-secret"\n          key: "dsn"\n')),(0,o.kt)("p",null,"If both ",(0,o.kt)("inlineCode",{parentName:"p"},"dsn")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"secretKeyRef")," are specified, ",(0,o.kt)("inlineCode",{parentName:"p"},"dsn")," will take the precedence, and the referenced Secret will not be pulled."),(0,o.kt)("h3",{id:"full-example"},"Full example"),(0,o.kt)("p",null,"Here's the full example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'  health:\n    healthProbeBindAddress: :8081\n  metrics:\n    bindAddress: 127.0.0.1:8080\n  webhook:\n    port: 9443\n  leaderElection:\n    leaderElect: true\n    resourceName: bfa62c96.dbaas.bedag.ch\n  rps: 1\n  keepalive: 30\n  dbms:\n    - databaseClassName: "databaseclass-sample-sqlserver"\n      endpoints:\n        - name: "us-sqlserver-test"\n          dsn: "sqlserver://sa:Password&1@192.168.58.1:1433"\n    - databaseClassName: "databaseclass-sample-psql"\n      endpoints:\n        - name: "us-postgres-test"\n          dsn: "postgres://postgres:Password&1@192.168.58.1:5432/postgres"\n    - databaseClassName: "databaseclass-sample-mariadb"\n      endpoints:\n        - name: "us-mariadb-test"\n          dsn: "mariadb://root:Password&1@192.168.58.1:3306/mysql"\n')))}u.isMDXComponent=!0}}]);