replicaCount: 1

image:
  # Repository of the operator manager image.
  repository: criscola/kubernetes-dbaas
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

podAnnotations: {}

podSecurityContext:
  runAsNonRoot: true

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
# runAsUser: 1000

# Allocating less resources might create problems
resources:
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 20Mi

nodeSelector: {}

tolerations: []

affinity: {}

# The termination grace period of your operator manager container.
terminationGracePeriodSeconds: 10

# Manager service account name
managerSaName: kubernetes-dbaas-controller-manager

# Should the ServiceAccount of the manager Pod automount the SA Account Token?
# otherwise
automountServiceAccountToken: true

# Arguments passed to the Operator binary, e.g. "--debug=true".
managerArgs: []

livenessProbe:
  httpGet:
    path: /healthz
    port: 8081
  initialDelaySeconds: 15
  periodSeconds: 20

readinessProbe:
  httpGet:
    path: /readyz
    port: 8081
  initialDelaySeconds: 5
  periodSeconds: 10

# If set to true, enabled the deployment of the RBAC needed to protect the /metrics endpoint.
enableMetricsRbac: true
# Namespaces of where Prometheus is deployed. It is required for discovering the ServiceMonitor used to scrape the metrics.
prometheusNamespace: prometheus
# Name of the Service Account allowed to scrape the metrics endpoint.
prometheusSaName: prometheus-kube-prometheus-prometheus
# Namespace of the Service Account allowed to scrape the metrics endpoint.
prometheusSaNamespace: prometheus

# DatabaseClasses
dbc:
  - name: "databaseclass-sample-sqlserver"
    driver: "sqlserver"
    operations:
      create:
        name: "sp_create_rowset_EAV"
        inputs:
          k8sName: "{{ .Metadata.name }}"
      delete:
        name: "sp_delete"
        inputs:
          k8sName: "{{ .Metadata.name }}"
      rotate:
        name: "sp_rotate"
        inputs:
          k8sName: "{{ .Metadata.name }}"
    secretFormat:
      username: "{{ .Result.username }}"
      password: "{{ .Result.password }}"
      port: "{{ .Result.port }}"
      dbName: "{{ .Result.dbName }}"
      server: "{{ .Result.fqdn }}"
      lastRotation: "{{ .Result.lastRotation }}"
      dsn: "sqlserver://{{ .Result.username }}:{{ .Result.password }}@{{ .Result.fqdn }}:{{ .Result.port }}/{{ .Result.dbName }}"
  - name: "databaseclass-sample-postgres"
    driver: "postgres"
    operations:
      create:
        name: "sp_create_db_rowset_eav"
        inputs:
          k8sName: "{{ .Metadata.name }}"
      delete:
        name: "sp_delete"
        inputs:
          k8sName: "{{ .Metadata.name }}"
      rotate:
        name: "sp_rotate"
        inputs:
          k8sName: "{{ .Metadata.name }}"
    secretFormat:
      username: "{{ .Result.username }}"
      password: "{{ .Result.password }}"
      port: "{{ .Result.port }}"
      dbName: "{{ .Result.dbName }}"
      server: "{{ .Result.fqdn }}"
      lastRotation: "{{ .Result.lastRotation }}"
      dsn: "sqlserver://{{ .Result.username }}:{{ .Result.password }}@{{ .Result.fqdn }}:{{ .Result.port }}/{{ .Result.dbName }}"
  - name: "databaseclass-sample-mariadb"
    driver: "mariadb"
    operations:
      create:
        name: "sp_create_db_rowset_eav"
        inputs:
          "0": "{{ .Metadata.name }}"
      delete:
        name: "sp_delete"
        inputs:
          "0": "{{ .Metadata.name }}"
      rotate:
        name: "sp_rotate"
        inputs:
          "0": "{{ .Metadata.name }}"
    secretFormat:
      username: "{{ .Result.username }}"
      password: "{{ .Result.password }}"
      port: "{{ .Result.port }}"
      dbName: "{{ .Result.dbName }}"
      server: "{{ .Result.fqdn }}"
      lastRotation: "{{ .Result.lastRotation }}"
      dsn: "{{ .Result.username }}:{{ .Result.password }}@{{ .Result.fqdn }}:{{ .Result.port }}/{{ .Result.dbName }}"

dbmsSecrets:
  - name: "us-sqlserver-test-credentials"
    stringData:
      dsn: "sqlserver://sa:Password&1@192.168.49.1:1433/master"
  - name: "us-postgres-test-credentials"
    stringData:
      dsn: "postgres://postgres:Password&1@192.168.49.1:5432/postgres"
  - name: "us-mariadb-test-credentials"
    stringData:
      dsn: "mariadb://root:Password&1@192.168.49.1:3306/mysql"

# Operator configuration including the relative Manager configuration.
# See https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.8.3/pkg/config/v1alpha1#ControllerManagerConfigurationSpec.
operatorConfig:
  health:
    healthProbeBindAddress: :8081
  metrics:
    bindAddress: 127.0.0.1:8080
  webhook:
    port: 9443
  leaderElection:
    leaderElect: true
    resourceName: bfa62c96.dbaas.bedag.ch
  # Specifies the maximum number of operations per second allowed per endpoint. Set to 0 to disable rate limiting.
  rps: 1
  # Describes the DBMS configuration. Each entry includes a "databaseClassName" attribute specifying
  # the name of the DatabaseClass resource associated with the endpoints along with an "endpoints" attribute
  # specifying the "name" of endpoint to be made available to end-users as well as its connection string (DSN).
  # To learn more about the supported DSN formats, see: https://github.com/xo/dburl.
  dbms:
    - databaseClassName: "databaseclass-sample-sqlserver"
      endpoints:
        - name: "us-sqlserver-test"
          secretKeyRef:
            name: "us-sqlserver-test-credentials"
            key: "dsn"
    - databaseClassName: "databaseclass-sample-psql"
      endpoints:
        - name: "us-postgres-test"
          secretKeyRef:
            name: "us-postgres-test-secret"
            key: "dsn"
    - databaseClassName: "databaseclass-sample-mariadb"
      endpoints:
        - name: "us-mariadb-test"
          secretKeyRef:
            name: "us-mariadb-test-credentials"
            key: "dsn"