@startuml
skinparam linetype ortho
left to right direction
skinparam classArrowFontSize 12
skinparam classAttributeFontSize  12
skinparam linetype linear

namespace config {
    class config.OperatorConfig << (T, #FF7700) >>  {
    }
    class "<font color=blue>map</font>[string]database.DbmsConfig" as fontcolorbluemapfontstringdatabaseDbmsConfig {
        'This class was created so that we can correctly have an alias pointing to this name. Since it contains dots that can break namespaces
    }
}



namespace controllers {
    class DatabaseReconciler << (S,Aquamarine) >> {
        + Log logr.Logger
        + Scheme *runtime.Scheme

        - finalizeDbaasResource(logger logr.Logger, dbaasResource *Database) error
        - addFinalizer(dbaasResource *Database) error
        - createDb(dbaasResource *Database) error
        - deleteDb(dbaasResource *Database) error
        - createSecret(owner *Database, output database.OpOutput, dsn database.Dsn) error

        + Reconcile(ctx context.Context, req controller-runtime.Request) (controller-runtime.Result, error)
        + SetupWithManager(mgr controller-runtime.Manager) error
        + ManageSuccess(obj *Database) (reconcile.Result, error)
        + ManageError(obj *Database, issue error) (reconcile.Result, error)

    }
}
"client.Client" *-- "extends""controllers.DatabaseReconciler"


"controllers.DatabaseReconciler""uses" o-- "logr.Logger"

namespace database {
    class Dbms << (S,Aquamarine) >> {
        + Driver string

        + Operations <font color=blue>map</font>[string]Operation
        + Endpoints []Endpoint

    }
    class DbmsConn << (S,Aquamarine) >> {
    }
    interface Driver  {
        + CreateDb(name string) OpOutput
        + DeleteDb(name string) OpOutput
        + Ping() error

    }
    class Dsn << (S,Aquamarine) >> {
        + GetDriver() string
        + String() string

    }
    class Endpoint << (S,Aquamarine) >> {
        + Name string
        + Dsn Dsn

        + IsNamePresent() bool
        + IsDsnPresent() bool

    }
    class MssqlConn << (S,Aquamarine) >> {
        - c *sql.DB
        - operations <font color=blue>map</font>[string]Operation

        + CreateDb(name string) OpOutput
        + DeleteDb(name string) OpOutput
        + Ping() error

    }
    class OpOutput << (S,Aquamarine) >> {
        + Out []string
        + Err error

    }
    class Operation << (S,Aquamarine) >> {
        + Name string
        + Inputs <font color=blue>map</font>[string]string
        + Outputs <font color=blue>map</font>[string]string

    }
    class database.DbmsConfig << (T, #FF7700) >>  {
    }
    class database.Dsn << (T, #FF7700) >>  {
    }
}
"database.Driver" *-- "extends""database.DbmsConn"

"database.Driver" <|-- "implements""database.MssqlConn"


"database.Dbms""uses" o-- "database.Endpoint"
"database.Dbms""uses" o-- "database.Operation"
"database.Endpoint""uses" o-- "database.Dsn"
"database.MssqlConn""uses" o-- "database.Operation"
"database.MssqlConn""uses" o-- "sql.DB"

namespace pool {
    class dbmsPoolEntry << (S,Aquamarine) >> {
        - dbmsConn *database.DbmsConn
        - dbmsConfig database.Endpoint

    }
    class pool.dbmsPool << (T, #FF7700) >>  {
    }
}


"pool.dbmsPoolEntry""uses" o-- "database.DbmsConn"
"pool.dbmsPoolEntry""uses" o-- "database.Endpoint"

namespace v1 {
    class Database << (S,Aquamarine) >> {
        + Spec DatabaseSpec
        + Status DatabaseStatus

        + DeepCopyInto(out *Database)
        + DeepCopy() *Database
        + DeepCopyObject() runtime.Object

    }
    class DatabaseList << (S,Aquamarine) >> {
        + Items []Database

        + DeepCopyInto(out *DatabaseList) 
        + DeepCopy() *DatabaseList
        + DeepCopyObject() runtime.Object

    }
    class DatabaseSpec << (S,Aquamarine) >> {
        + Provisioner string
        + Endpoint string

        + DeepCopyInto(out *DatabaseSpec) 
        + DeepCopy() *DatabaseSpec

    }
    class DatabaseStatus << (S,Aquamarine) >> {
        + LastError string
        + LastUpdate string
        + LastErrorUpdateCount int
        + Unrecoverable bool

        + DeepCopyInto(out *DatabaseStatus) 
        + DeepCopy() *DatabaseStatus

    }
}

namespace cmd {
    class Command << (S,Aquamarine) >> {
        + rootCmd *cobra.Command

        + Execute()
        + StartOperator()
        + LoadConfig()
        + RegisterEndpoints()
    }
}

namespace main {
    class main << (S,Aquamarine) >> {
        + main()
    }
}

"main.main""uses" o-- "cmd.Command"
"cmd.Command""uses" o-- "config"
"cmd.Command""uses" o-- "pool"
"cmd.Command""uses" o-- "controllers"
"cmd.Command""uses" o-- "v1"

"v1.Database""uses" o-- "v1.DatabaseSpec"
"v1.Database""uses" o-- "v1.DatabaseStatus"
"v1.DatabaseList""uses" o-- "v1.Database"

"config.fontcolorbluemapfontstringdatabaseDbmsConfig" #.. "alias of""config.OperatorConfig"
"database.[]Dbms" #.. "alias of""database.DbmsConfig"
"pool.<font color=blue>map</font>[string][]dbmsPoolEntry" #.. "alias of""pool.dbmsPool"
@enduml
