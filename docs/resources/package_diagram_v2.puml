@startuml
namespace controllers {
    class DatabaseReconciler << (S,Aquamarine) >> {
        + Log logr.Logger
        + Scheme *runtime.Scheme
        + EventRecorder record.EventRecorder
        + DbmsList database.DbmsList
        + Pool pool.Pool

        - addFinalizer(obj *v1.Database) error
        - createDb(obj *v1.Database) ReconcileError
        - deleteDb(obj *v1.Database) ReconcileError
        - rotate(obj *v1.Database) ReconcileError
        - getDbmsClassFromDb(obj *v1.Database) (v1.DatabaseClass, ReconcileError)
        - getDbmsConnectionByEndpointName(endpointName string) (database.Driver, ReconcileError)
        - handleReconcileError(obj *v1.Database, err ReconcileError) 
        - handleReadyConditionError(obj *v1.Database, err error, additionalInfo ...<font color=blue>interface</font>{}) 
        - logInfoEvent(obj *v1.Database, reason string, message string, additionalInfo ...<font color=blue>interface</font>{}) 
        - createSecret(owner *v1.Database, secretFormat database.SecretFormat, output database.OpOutput) ReconcileError
        - updateReadyCondition(obj *v1.Database, status v1.ConditionStatus, reason string, message string) error
        - shouldRotate(obj *v1.Database) (bool, ReconcileError)

        + SetupWithManager(mgr controller-runtime.Manager) error
        + Reconcile(ctx context.Context, req controller-runtime.Request) (controller-runtime.Result, error)

    }
    class ReconcileError << (S,Aquamarine) >> {
        + Reason string
        + Message string
        + Err error
        + AdditionalInfo []<font color=blue>interface</font>{}

        + IsNotEmpty() bool
        + With(values []<font color=blue>interface</font>{}) ReconcileError

    }
}
"client.Client" *-- "extends""controllers.DatabaseReconciler"


"controllers.DatabaseReconciler""uses" o-- "database.DbmsList"
"controllers.DatabaseReconciler""uses" o-- "logr.Logger"
"controllers.DatabaseReconciler""uses" o-- "pool.Pool"
"controllers.DatabaseReconciler""uses" o-- "record.EventRecorder"
"controllers.DatabaseReconciler""uses" o-- "runtime.Scheme"

namespace database {
    class Dbms << (S,Aquamarine) >> {
        + DatabaseClassName string
        + Endpoints []Endpoint

        + DeepCopyInto(out *Dbms) 
        + DeepCopy() *Dbms

    }
    class DbmsConn << (S,Aquamarine) >> {
    }
    class DbmsList << (S,Aquamarine) >> {
        + GetDatabaseClassNameByEndpointName(endpointName string) string
        + DeepCopyInto(out *DbmsList) 
        + DeepCopy() DbmsList

    }
    interface Driver  {
        + CreateDb(operation Operation) OpOutput
        + DeleteDb(operation Operation) OpOutput
        + Rotate(operation Operation) OpOutput
        + Ping() error

    }
    class Dsn << (S,Aquamarine) >> {
        + GenMysql() (string, error)
        + GenSqlserver() (string, error)
        + GenPostgres() (string, error)
        + String() string

    }
    class Endpoint << (S,Aquamarine) >> {
        + Name string
        + Dsn Dsn

        + IsNamePresent() bool
        + IsDsnPresent() bool
        + DeepCopyInto(out *Endpoint) 
        + DeepCopy() *Endpoint

    }
    class MysqlConn << (S,Aquamarine) >> {
        - c *sql.DB

        + CreateDb(operation Operation) OpOutput
        + DeleteDb(operation Operation) OpOutput
        + Rotate(operation Operation) OpOutput
        + Ping() error

    }
    class OpOutput << (S,Aquamarine) >> {
        + Result <font color=blue>map</font>[string]string
        + Err error

    }
    class OpValues << (S,Aquamarine) >> {
        + Metadata <font color=blue>map</font>[string]<font color=blue>interface</font>{}
        + Parameters <font color=blue>map</font>[string]string

    }
    class Operation << (S,Aquamarine) >> {
        + Name string
        + Inputs <font color=blue>map</font>[string]string

        + RenderOperation(values OpValues) (Operation, error)
        + DeepCopyInto(out *Operation) 
        + DeepCopy() *Operation

    }
    class PsqlConn << (S,Aquamarine) >> {
        - c *pgx.Conn

        + CreateDb(operation Operation) OpOutput
        + DeleteDb(operation Operation) OpOutput
        + Rotate(operation Operation) OpOutput
        + Ping() error

    }
    class RateLimitedDbmsConn << (S,Aquamarine) >> {
        - limiter ratelimit.Limiter

        + CreateDb(operation Operation) OpOutput
        + DeleteDb(operation Operation) OpOutput
        + Ping() error

    }
    class SecretFormat << (S,Aquamarine) >> {
        + RenderSecretFormat(createOpOutput OpOutput) (SecretFormat, error)
        + From(toMerge <font color=blue>map</font>[string]string) SecretFormat
        + DeepCopyInto(out *SecretFormat) 
        + DeepCopy() SecretFormat

    }
    class SqlserverConn << (S,Aquamarine) >> {
        - c *sql.DB

        + CreateDb(operation Operation) OpOutput
        + DeleteDb(operation Operation) OpOutput
        + Rotate(operation Operation) OpOutput
        + Ping() error

    }
    class database.DbmsList << (T, #FF7700) >>  {
    }
    class database.Dsn << (T, #FF7700) >>  {
    }
    class database.SecretFormat << (T, #FF7700) >>  {
    }
}
"database.Driver" *-- "extends""database.DbmsConn"
"database.Driver" *-- "extends""database.RateLimitedDbmsConn"

"database.Driver" <|-- "implements""database.MysqlConn"
"database.Driver" <|-- "implements""database.PsqlConn"
"database.Driver" <|-- "implements""database.SqlserverConn"

"database.Dbms""uses" o-- "database.Endpoint"
"database.Endpoint""uses" o-- "database.Dsn"

namespace pool {
    class DbmsEntry << (S,Aquamarine) >> {
        - driver string
        - dsn database.Dsn

    }
    class DbmsPool << (S,Aquamarine) >> {
        - entries <font color=blue>map</font>[string]Entry
        - rps int

        + Get(name string) Entry
        + RegisterDbms(dbms database.Dbms, driver string) error
        + Register(name string, driver string, dsn database.Dsn) error

    }
    interface Entry  {
    }
    interface Pool  {
        + Get(name string) Entry
        + Register(name string, driver string, dsn database.Dsn) error

    }
}
"pool.Entry" *-- "extends""pool.DbmsEntry"

"pool.Pool" <|-- "implements""pool.DbmsPool"

"pool.DbmsEntry""uses" o-- "database.Dsn"
"pool.DbmsPool""uses" o-- "pool.Entry"

namespace test {
    class test.TestAttribute << (T, #FF7700) >>  {
    }
    class test.TestType << (T, #FF7700) >>  {
    }
}



namespace v1 {
    class Database << (S,Aquamarine) >> {
        + Spec DatabaseSpec
        + Status DatabaseStatus

        + SetupWebhookWithManager(mgr controller-runtime.Manager) error
        + Default() 
        + ValidateCreate() error
        + ValidateUpdate(old runtime.Object) error
        + ValidateDelete() error
        + DeepCopyInto(out *Database) 
        + DeepCopy() *Database
        + DeepCopyObject() runtime.Object

    }
    class DatabaseClass << (S,Aquamarine) >> {
        + Spec DatabaseClassSpec

        + DeepCopyInto(out *DatabaseClass) 
        + DeepCopy() *DatabaseClass
        + DeepCopyObject() runtime.Object

    }
    class DatabaseClassList << (S,Aquamarine) >> {
        + Items []DatabaseClass

        + DeepCopyInto(out *DatabaseClassList) 
        + DeepCopy() *DatabaseClassList
        + DeepCopyObject() runtime.Object

    }
    class DatabaseClassSpec << (S,Aquamarine) >> {
        + Driver string
        + Operations <font color=blue>map</font>[string]database.Operation
        + SecretFormat database.SecretFormat

        + DeepCopyInto(out *DatabaseClassSpec) 
        + DeepCopy() *DatabaseClassSpec

    }
    class DatabaseList << (S,Aquamarine) >> {
        + Items []Database

        + DeepCopyInto(out *DatabaseList) 
        + DeepCopy() *DatabaseList
        + DeepCopyObject() runtime.Object

    }
    class DatabaseSpec << (S,Aquamarine) >> {
        + Endpoint string
        + Params <font color=blue>map</font>[string]string

        + DeepCopyInto(out *DatabaseSpec) 
        + DeepCopy() *DatabaseSpec

    }
    class DatabaseStatus << (S,Aquamarine) >> {
        + Conditions []v1.Condition

        + DeepCopyInto(out *DatabaseStatus) 
        + DeepCopy() *DatabaseStatus

    }
    class OperatorConfig << (S,Aquamarine) >> {
        + Complete() (v1alpha1.ControllerManagerConfigurationSpec, error)
        + DeepCopyInto(out *OperatorConfig) 
        + DeepCopy() *OperatorConfig
        + DeepCopyObject() runtime.Object

    }
}

"database.DbmsList" *-- "extends""v1.OperatorConfig"
"v1alpha1.ControllerManagerConfigurationSpec" *-- "extends""v1.OperatorConfig"


"v1.Database""uses" o-- "v1.DatabaseSpec"
"v1.Database""uses" o-- "v1.DatabaseStatus"
"v1.DatabaseClass""uses" o-- "v1.DatabaseClassSpec"
"v1.DatabaseClassList""uses" o-- "v1.DatabaseClass"
"v1.DatabaseClassSpec""uses" o-- "database.Operation"
"v1.DatabaseClassSpec""uses" o-- "database.SecretFormat"
"v1.DatabaseList""uses" o-- "v1.Database"
"v1.DatabaseStatus""uses" o-- "v1.Condition"

"database.[]Dbms" #.. "alias of""database.DbmsList"
@enduml
